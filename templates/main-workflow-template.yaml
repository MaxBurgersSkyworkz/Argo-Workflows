apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: main-workflow-template
spec:
  entrypoint: dispatcher
  arguments:
    parameters:
      - name: repo-name # Input parameter for the OWNER/REPO string
        value: ""
      - name: target-branch
        value: ""
  templates:
    - name: dispatcher
      steps:
        - - name: detect-project-type
            template: run-detection-script
            arguments:
              parameters:
                - name: repo-name
                  value: "{{workflow.parameters.repo-name}}" # Pass workflow input to the step

        - - name: submit-target-workflow
            template: submit-argo-workflow
            arguments:
              parameters:
                - name: derived-template-name # Get output from previous step
                  value: "{{steps.detect-project-type.outputs.result}}"
                - name: repo-name # Pass original repo name to the submit step
                  value: "{{workflow.parameters.repo-name}}"
                - name: target-branch
                  value: "{{workflow.parameters.target-branch}}"
            # Optional: Only run if detection was successful and type is not unknown
            when: "{{steps.detect-project-type.outputs.result}} != 'unknown-project-type-handler'"

    # Template to run the detection bash script
    - name: run-detection-script
      inputs:
        parameters:
          - name: repo-name
      outputs:
        result: "{{steps.script.outputs.result}}" # Capture stdout of the script step below
      container:
        image: alpine/k8s:1.28.2 # Image with curl, bash. Need jq. Consider building custom image or using multi-step install.
        command: ["/bin/sh", "-c"] # Use sh to run install + script
        args:
          - |
            apk add --no-cache jq bash &&
            bash /scripts/detect_repo_type.sh
        env:
          - name: REPO_FULL_NAME # Pass repo name as env var to the script
            value: "{{inputs.parameters.repo-name}}"
          - name: GITHUB_TOKEN # Mount the token from the secret
            valueFrom:
              secretKeyRef:
                name: github-token # <-- Name of your K8s secret
                key: token # <-- Key within the secret containing the gsh token
        volumeMounts:
          - name: scripts
            mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: detection-script-cm # Assumes script is in a ConfigMap

    # Template to submit the target WorkflowTemplate using 'argo submit'
    - name: submit-argo-workflow
      inputs:
        parameters:
          - name: derived-template-name
          - name: repo-name
          - name: targt-branch
      container:
        image: argoproj/argocli:v3.5.4 # Use an appropriate version of the Argo CLI image
        command: [argo]
        args:
          - submit
          - --workflowtemplate # Submit based on a WorkflowTemplate
          - "{{inputs.parameters.derived-template-name}}"
          - -p
          - repo-name={{inputs.parameters.repo-name}}
          - target-branch={{inputs.parameters.target-branch}}
